{"version":3,"file":"index.umd.min.js","sources":["../src/utils.ts","../src/syllabify.ts","../src/utils/remove_acutes.ts","../src/utils/remove_graves.ts","../src/utils/add_acute.ts","../src/utils/accentuate_last_vowel.ts","../src/utils/contains_circumflex.ts","../src/accentuation.ts","../src/amalgamate.ts"],"sourcesContent":["const consonants = [\n  'β',\n  'γ',\n  'δ',\n  'ζ',\n  'θ',\n  'κ',\n  'λ',\n  'μ',\n  'ν',\n  'ξ',\n  'π',\n  'ρ',\n  'ς',\n  'σ',\n  'τ',\n  'φ',\n  'χ',\n  'ψ',\n];\nconst consonantClustersPronouncedTogether = [\n  'βλ',\n  'βρ',\n  'γλ',\n  'γν',\n  'γρ',\n  'δρ',\n  'θλ',\n  'θρ',\n  'θν',\n  'κλ',\n  'κρ',\n  'κτ',\n  'μν',\n  'πλ',\n  'πν',\n  'πρ',\n  'πτ',\n  'σκ',\n  'σκλ',\n  'σμ',\n  'σπ',\n  'σπλ',\n  'στ',\n  'στρ',\n  'σφ',\n  'σθ',\n  'σχ',\n  'τρ',\n  'φθ',\n  'φλ',\n  'φρ',\n  'χρ',\n  'χθ',\n];\n\nconst longVowels = ['η', 'ω', 'ᾳ'];\nconst shortVowels = ['α', 'ε', 'ι', 'ο', 'υ'];\nconst vowels = longVowels.concat(shortVowels);\n\nconst longDiphthongs = ['ει', 'ηυ', 'ου', 'ευ', 'αι', 'υι'];\nconst shortDiphthongsWhenFinal = ['αυ', 'οι'];\nconst diphthongs = longDiphthongs.concat(shortDiphthongsWhenFinal);\n\nfunction isLongVowel(character: string) {\n  return longVowels.indexOf(character) !== -1;\n}\n\nexport function isLongSyllable(syllable: string) {\n  const vowelsOnly = syllable.split('').filter(isVowel).join('');\n  if (vowelsOnly.length === 2) {\n    return isDiphthong(vowelsOnly);\n  }\n  return isLongVowel(vowelsOnly);\n}\n\nfunction isVowel(character = '') {\n  return vowels.indexOf(character.normalize('NFD')[0] || '') !== -1;\n}\n\nfunction beginsWithVowel(characters: string) {\n  return isVowel(characters[0]);\n}\n\nfunction isConsonant(character: string) {\n  return !isVowel(character);\n}\n\nfunction isDiphthong(characters: string) {\n  return diphthongs.indexOf(characters) !== -1;\n}\n\nfunction beginsWithConsonant(characters: string) {\n  return isConsonant(characters[0] || '');\n}\n\nfunction beginsWithDiphthong(characters: string) {\n  return diphthongs.indexOf(withoutAccents(characters).substr(0, 2)) !== -1;\n}\n\nfunction beginsWithConsonantClusterPronouncedTogether(characters: string) {\n  const charactersLowerCased = characters.toLowerCase();\n  for (let x = 0; x < consonantClustersPronouncedTogether.length; x++) {\n    const tmp = consonantClustersPronouncedTogether[x] || '';\n    if (charactersLowerCased.indexOf(tmp) === 0) {\n      return characters.substr(0, tmp.length);\n    }\n  }\n  return null;\n}\n\nfunction endsWithShortDiphthong(characters: string) {\n  return (\n    shortDiphthongsWhenFinal.indexOf(\n      characters.substr(characters.length - 2),\n    ) !== -1\n  );\n}\n\nfunction isSingleConsonant(characters: string) {\n  return characters.length === 1 && isConsonant(characters[0] || '');\n}\n\nfunction beginsWithSingleConsonantFollowedByVowel(characters: string) {\n  return isConsonant(characters[0] || '') && isVowel(characters[1]);\n}\n\nfunction beginsWithVowelFollowedByVowel(characters: string) {\n  return isVowel(characters[0]) && isVowel(characters[1]);\n}\n\nfunction beginsWithDoubleConsonant(characters: string) {\n  return (\n    characters.length > 1 &&\n    isConsonant(characters[0] || '') &&\n    isConsonant(characters[1] || '')\n  );\n}\n\nfunction withoutAccent(character: string) {\n  return character.normalize('NFD')[0];\n}\n\nfunction withoutAccents(characters: string) {\n  return characters.split('').map(withoutAccent).join('');\n}\n\nfunction removePunctuation(characters: string) {\n  return characters.replace(/[,.·;]/g, '');\n}\n\nfunction removeNumbers(characters: string) {\n  return clean(characters).replace(/[1234567890]/g, '');\n}\n\n// function lengthen(vowel: string) {}\n\n// function connectAndLengthen(part1: string, part2: string) {}\n\nfunction clean(characters: string) {\n  return (\n    characters\n      //remove newlines\n      .replace(/(\\r\\n|\\n|\\r)/gm, '')\n      // remove multiple spaces as well\n      .replace(/ +(?= )/g, '')\n  );\n}\n\nexport {\n  consonants,\n  consonantClustersPronouncedTogether,\n  isVowel,\n  isLongVowel,\n  isConsonant,\n  withoutAccents,\n  removeNumbers,\n  removePunctuation,\n  isSingleConsonant,\n  beginsWithVowel,\n  beginsWithDiphthong,\n  beginsWithConsonant,\n  beginsWithVowelFollowedByVowel,\n  beginsWithSingleConsonantFollowedByVowel,\n  beginsWithDoubleConsonant,\n  beginsWithConsonantClusterPronouncedTogether,\n  endsWithShortDiphthong,\n};\n","import type { Syllable, ConsonantCluster } from '../phonology';\nimport {\n  isSingleConsonant,\n  beginsWithConsonantClusterPronouncedTogether,\n  beginsWithConsonant,\n  beginsWithVowelFollowedByVowel,\n  beginsWithSingleConsonantFollowedByVowel,\n  isConsonant,\n  beginsWithDoubleConsonant,\n  beginsWithVowel,\n  removeNumbers,\n  beginsWithDiphthong,\n  removePunctuation,\n} from './utils';\n\nfunction syllabify(word = '') {\n  const syllables: Syllable[] = [];\n  let currentSyllable = '';\n  let charactersRemaining: string = word.normalize('NFC');\n  let cluster;\n\n  function advanceSyllable() {\n    if (currentSyllable.length) {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n    }\n  }\n\n  function shiftCharacter() {\n    currentSyllable += charactersRemaining[0];\n    charactersRemaining = charactersRemaining.substr(1);\n  }\n\n  // let wordWithoutAccents = withoutAccents(word);\n\n  while (charactersRemaining.length) {\n    if (isSingleConsonant(word)) {\n      shiftCharacter();\n      continue;\n    }\n\n    if (\n      (cluster =\n        beginsWithConsonantClusterPronouncedTogether(charactersRemaining))\n    ) {\n      if (currentSyllable.length) {\n        advanceSyllable();\n      }\n      currentSyllable += cluster;\n      charactersRemaining = charactersRemaining.substr(cluster.length);\n      continue;\n    }\n\n    if (beginsWithSingleConsonantFollowedByVowel(charactersRemaining)) {\n      // console.log('beginsWithSingleConsonantFollowedByVowel',charactersRemaining);\n      if (currentSyllable.length) {\n        advanceSyllable();\n      }\n      shiftCharacter();\n      continue;\n    }\n\n    if (beginsWithDoubleConsonant(charactersRemaining)) {\n      // console.log('beginsWithDoubleConsonant',charactersRemaining);\n      shiftCharacter();\n      advanceSyllable();\n      continue;\n    }\n\n    if (beginsWithConsonant(charactersRemaining)) {\n      shiftCharacter();\n      continue;\n    }\n\n    if (beginsWithDiphthong(charactersRemaining)) {\n      if (charactersRemaining[1]) {\n        currentSyllable += charactersRemaining[0] + charactersRemaining[1];\n      }\n      charactersRemaining = charactersRemaining.substr(2);\n\n      if (beginsWithVowel(charactersRemaining)) {\n        advanceSyllable();\n      }\n      continue;\n    }\n\n    if (beginsWithVowelFollowedByVowel(charactersRemaining)) {\n      // console.log('beginsWithVowelFollowedByVowel',charactersRemaining)\n      shiftCharacter();\n      advanceSyllable();\n      continue;\n    }\n\n    shiftCharacter();\n  }\n  advanceSyllable();\n  return syllables;\n}\n\nfunction extractConsonantClustersPronouncedTogether(text: string) {\n  const consonantClusters: ConsonantCluster[] = [];\n  const words = removeNumbers(removePunctuation(text.toLowerCase())).split(' ');\n  // console.log(words);\n  words.forEach(function (word: string) {\n    const characters = word.split('');\n    const consonantCluster = [];\n    while (characters[0] && isConsonant(characters[0])) {\n      consonantCluster.push(characters.shift());\n    }\n    if (consonantCluster.length > 1) {\n      consonantClusters.push(consonantCluster.join(''));\n    }\n  });\n  return Array.from(new Set(consonantClusters));\n}\n\nexport { syllabify, extractConsonantClustersPronouncedTogether };\n","function isNotAcute(character: string) {\n  return character.charCodeAt(0) !== 769;\n}\nexport default function (characters = '') {\n  return characters\n    .normalize('NFD')\n    .split('')\n    .filter(isNotAcute)\n    .join('')\n    .normalize('NFC');\n}\n","function isNotGrave(character: string) {\n  return character.charCodeAt(0) !== 768;\n}\n\nexport default function (characters = '') {\n  return characters\n    .normalize('NFD')\n    .split('')\n    .filter(isNotGrave)\n    .join('')\n    .normalize('NFC');\n}\n","const acute = String.fromCharCode(769);\n\nexport default function (character = '') {\n  return character.concat(acute).normalize('NFC');\n}\n","import addAcute from './add_acute';\nimport { isVowel } from '../utils';\n\nfunction replaceCharacter(characters: string, index: number) {\n  return (\n    characters.substr(0, index) +\n    addAcute(characters[index]) +\n    characters.substr(index + 1)\n  );\n}\n\nfunction accentuateLastVowel(characters: string) {\n  characters = characters.normalize('NFC'); // necessary?\n\n  const addedAcute = false;\n  for (let x = characters.length - 1; x > -1; x--) {\n    if (!addedAcute && isVowel(characters[x])) {\n      characters = replaceCharacter(characters, x);\n\n      return characters;\n    }\n  }\n  return characters;\n}\n\nexport default accentuateLastVowel;\n","const circumflex = String.fromCharCode(834);\n\nfunction isCircumflex(character: string) {\n  return character === circumflex;\n}\n\nexport default function (characters = '') {\n  return characters.normalize('NFD').split('').some(isCircumflex);\n}\n","import { syllabify } from './syllabify';\nimport type { Syllable } from '../phonology';\nimport { isLongSyllable } from './utils';\nimport removeAcutes from './utils/remove_acutes';\nimport removeGraves from './utils/remove_graves';\nimport accentuateLastVowel from './utils/accentuate_last_vowel';\nimport containsCircumflex from './utils/contains_circumflex';\n\nfunction accentuateAntepenult(syllables: Syllable[]) {\n  syllables[syllables.length - 3] = accentuateLastVowel(\n    syllables[syllables.length - 3] || '',\n  );\n  return syllables;\n}\n\nfunction accentuatePenult(syllables: Syllable[]) {\n  syllables[syllables.length - 2] = accentuateLastVowel(\n    syllables[syllables.length - 2] || '',\n  );\n  return syllables;\n}\n\nfunction accentuateUltima(syllables: Syllable[]) {\n  syllables[syllables.length - 1] = accentuateLastVowel(\n    syllables[syllables.length - 1] || '',\n  );\n  return syllables;\n}\n\nfunction accentuateVerb(word: string) {\n  word = removeAcutes(removeGraves(word));\n  let syllables = syllabify(word);\n  // let antepenult = syllables[syllables.length - 3];\n  const penult = syllables[syllables.length - 2] || '';\n  const ultima = syllables[syllables.length - 1] || '';\n\n  // if circumflex is on the ultima, then acute was absorbed from penultima\n  if (containsCircumflex(ultima)) {\n    return word;\n  }\n\n  if (syllables.length > 1) {\n    if (isLongSyllable(ultima)) {\n      syllables = accentuatePenult(syllables);\n    } else {\n      if (syllables.length > 2) {\n        syllables = accentuateAntepenult(syllables);\n      } else {\n        // \"The acute may not stand on a long penult when the\n        // ultima is short: δούλου, but δοῦλος.\" (Black)\n\n        if (isLongSyllable(ultima)) {\n          syllables = accentuatePenult(syllables);\n        } else if (!isLongSyllable(penult)) {\n          syllables = accentuatePenult(syllables);\n        }\n      }\n    }\n  } else {\n    syllables = accentuateUltima(syllables);\n  }\n\n  return syllables.join('').normalize('NFC');\n}\n\nexport { accentuateVerb };\n\n// John 9:40-41 has it all...\n\n/*\noxytone\n  words 'born' with accent on ultima\n\nparoxytone\n  words 'born' with accent on penultima\n\nproparoxytone\n  words 'born' with accent on antepenultima\n*/\n","export function amalgamate(characters: string) {\n  // Labials\n  // \"π, β, φ + σ form the double consonant ψ\" (Black)\n  characters = characters.replace(/[πβφ]σ/g, 'ψ');\n\n  // Velars\n  // \"κ, γ, χ + σ form the double consonant ξ.\" (Black)\n  characters = characters.replace(/[κγχ]σ/g, 'ξ');\n\n  // Dentals\n  // \"τ, δ, θ drop out before σ\" (Black)\n  characters = characters.replace(/[τδθ]σ/g, 'σ');\n  return characters;\n}\n"],"names":["consonantClustersPronouncedTogether","longVowels","vowels","concat","diphthongs","isLongSyllable","syllable","characters","character","vowelsOnly","split","filter","isVowel","join","length","indexOf","normalize","beginsWithVowel","isConsonant","beginsWithConsonant","beginsWithDiphthong","map","withoutAccent","withoutAccents","substr","beginsWithConsonantClusterPronouncedTogether","charactersLowerCased","toLowerCase","x","tmp","beginsWithSingleConsonantFollowedByVowel","beginsWithVowelFollowedByVowel","beginsWithDoubleConsonant","syllabify","word","cluster","syllables","currentSyllable","charactersRemaining","advanceSyllable","push","shiftCharacter","isNotAcute","charCodeAt","isNotGrave","acute","String","fromCharCode","replaceCharacter","index","accentuateLastVowel","circumflex","isCircumflex","accentuatePenult","removeAcutes","penult","ultima","some","containsCircumflex","accentuateAntepenult","accentuateUltima","replace"],"mappings":"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"}