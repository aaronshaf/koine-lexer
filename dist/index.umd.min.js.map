{"version":3,"file":"index.umd.min.js","sources":["../src/utils.ts","../src/amalgamate.ts","../src/syllabify.ts"],"sourcesContent":["const consonants = [\n  'β',\n  'γ',\n  'δ',\n  'ζ',\n  'θ',\n  'κ',\n  'λ',\n  'μ',\n  'ν',\n  'ξ',\n  'π',\n  'ρ',\n  'ς',\n  'σ',\n  'τ',\n  'φ',\n  'χ',\n  'ψ',\n];\nconst consonantClustersPronouncedTogether = [\n  'βλ',\n  'βρ',\n  'γλ',\n  'γν',\n  'γρ',\n  'δρ',\n  'θλ',\n  'θρ',\n  'θν',\n  'κλ',\n  'κρ',\n  'κτ',\n  'μν',\n  'πλ',\n  'πν',\n  'πρ',\n  'πτ',\n  'σκ',\n  'σκλ',\n  'σμ',\n  'σπ',\n  'σπλ',\n  'στ',\n  'στρ',\n  'σφ',\n  'σθ',\n  'σχ',\n  'τρ',\n  'φθ',\n  'φλ',\n  'φρ',\n  'χρ',\n  'χθ',\n];\n\nconst longVowels = ['η', 'ω', 'ᾳ'];\nconst shortVowels = ['α', 'ε', 'ι', 'ο', 'υ'];\nconst vowels = longVowels.concat(shortVowels);\n\nconst longDiphthongs = ['ει', 'ηυ', 'ου', 'ευ', 'αι', 'υι'];\nconst shortDiphthongsWhenFinal = ['αυ', 'οι'];\nconst diphthongs = longDiphthongs.concat(shortDiphthongsWhenFinal);\n\nfunction isLongVowel(character: string) {\n  return longVowels.indexOf(character) !== -1;\n}\n\nexport function isLongSyllable(syllable: string) {\n  const vowelsOnly = syllable.split('').filter(isVowel).join('');\n  if (vowelsOnly.length === 2) {\n    return isDiphthong(vowelsOnly);\n  }\n  return isLongVowel(vowelsOnly);\n}\n\nfunction isVowel(character = '') {\n  return vowels.indexOf(character.normalize('NFD')[0] || '') !== -1;\n}\n\nfunction beginsWithVowel(characters: string) {\n  return isVowel(characters[0]);\n}\n\nfunction isConsonant(character: string) {\n  return !isVowel(character);\n}\n\nfunction isDiphthong(characters: string) {\n  return diphthongs.indexOf(characters) !== -1;\n}\n\nfunction beginsWithConsonant(characters: string) {\n  return isConsonant(characters[0] || '');\n}\n\nfunction beginsWithDiphthong(characters: string) {\n  return diphthongs.indexOf(withoutAccents(characters).substr(0, 2)) !== -1;\n}\n\nfunction beginsWithConsonantClusterPronouncedTogether(characters: string) {\n  const charactersLowerCased = characters.toLowerCase();\n  for (let x = 0; x < consonantClustersPronouncedTogether.length; x++) {\n    const tmp = consonantClustersPronouncedTogether[x] || '';\n    if (charactersLowerCased.indexOf(tmp) === 0) {\n      return characters.substr(0, tmp.length);\n    }\n  }\n  return null;\n}\n\nfunction endsWithShortDiphthong(characters: string) {\n  return (\n    shortDiphthongsWhenFinal.indexOf(\n      characters.substr(characters.length - 2),\n    ) !== -1\n  );\n}\n\nfunction isSingleConsonant(characters: string) {\n  return characters.length === 1 && isConsonant(characters[0] || '');\n}\n\nfunction beginsWithSingleConsonantFollowedByVowel(characters: string) {\n  return isConsonant(characters[0] || '') && isVowel(characters[1]);\n}\n\nfunction beginsWithVowelFollowedByVowel(characters: string) {\n  return isVowel(characters[0]) && isVowel(characters[1]);\n}\n\nfunction beginsWithDoubleConsonant(characters: string) {\n  return (\n    characters.length > 1 &&\n    isConsonant(characters[0] || '') &&\n    isConsonant(characters[1] || '')\n  );\n}\n\nfunction withoutAccent(character: string) {\n  return character.normalize('NFD')[0];\n}\n\nfunction withoutAccents(characters: string) {\n  return characters.split('').map(withoutAccent).join('');\n}\n\nfunction removePunctuation(characters: string) {\n  return characters.replace(/[,.·;]/g, '');\n}\n\nfunction removeNumbers(characters: string) {\n  return clean(characters).replace(/[1234567890]/g, '');\n}\n\n// function lengthen(vowel: string) {}\n\n// function connectAndLengthen(part1: string, part2: string) {}\n\nfunction clean(characters: string) {\n  return (\n    characters\n      //remove newlines\n      .replace(/(\\r\\n|\\n|\\r)/gm, '')\n      // remove multiple spaces as well\n      .replace(/ +(?= )/g, '')\n  );\n}\n\nexport {\n  consonants,\n  consonantClustersPronouncedTogether,\n  isVowel,\n  isLongVowel,\n  isConsonant,\n  withoutAccents,\n  removeNumbers,\n  removePunctuation,\n  isSingleConsonant,\n  beginsWithVowel,\n  beginsWithDiphthong,\n  beginsWithConsonant,\n  beginsWithVowelFollowedByVowel,\n  beginsWithSingleConsonantFollowedByVowel,\n  beginsWithDoubleConsonant,\n  beginsWithConsonantClusterPronouncedTogether,\n  endsWithShortDiphthong,\n};\n","export function amalgamate (characters: string) {\n  // Labials\n  // \"π, β, φ + σ form the double consonant ψ\" (Black)\n  characters = characters.replace(/[πβφ]σ/g, \"ψ\");\n\n  // Velars\n  // \"κ, γ, χ + σ form the double consonant ξ.\" (Black)\n  characters = characters.replace(/[κγχ]σ/g, \"ξ\");\n\n  // Dentals\n  // \"τ, δ, θ drop out before σ\" (Black)\n  characters = characters.replace(/[τδθ]σ/g, \"σ\");\n  return characters;\n}\n","import type { Syllable, ConsonantCluster } from '../phonology';\nimport {\n  isSingleConsonant,\n  beginsWithConsonantClusterPronouncedTogether,\n  beginsWithConsonant,\n  beginsWithVowelFollowedByVowel,\n  beginsWithSingleConsonantFollowedByVowel,\n  isConsonant,\n  beginsWithDoubleConsonant,\n  beginsWithVowel,\n  removeNumbers,\n  beginsWithDiphthong,\n  removePunctuation,\n} from './utils';\n\nfunction syllabify(word: string = '') {\n  let syllables: Syllable[] = [];\n  let currentSyllable = '';\n  let charactersRemaining: string = word.normalize('NFC');\n  let cluster;\n\n  function advanceSyllable() {\n    if (currentSyllable.length) {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n    }\n  }\n\n  function shiftCharacter() {\n    currentSyllable += charactersRemaining[0];\n    charactersRemaining = charactersRemaining.substr(1);\n  }\n\n  // let wordWithoutAccents = withoutAccents(word);\n\n  while (charactersRemaining.length) {\n    if (isSingleConsonant(word)) {\n      shiftCharacter();\n      continue;\n    }\n\n    if (\n      (cluster =\n        beginsWithConsonantClusterPronouncedTogether(charactersRemaining))\n    ) {\n      if (currentSyllable.length) {\n        advanceSyllable();\n      }\n      currentSyllable += cluster;\n      charactersRemaining = charactersRemaining.substr(cluster.length);\n      continue;\n    }\n\n    if (beginsWithSingleConsonantFollowedByVowel(charactersRemaining)) {\n      // console.log('beginsWithSingleConsonantFollowedByVowel',charactersRemaining);\n      if (currentSyllable.length) {\n        advanceSyllable();\n      }\n      shiftCharacter();\n      continue;\n    }\n\n    if (beginsWithDoubleConsonant(charactersRemaining)) {\n      // console.log('beginsWithDoubleConsonant',charactersRemaining);\n      shiftCharacter();\n      advanceSyllable();\n      continue;\n    }\n\n    if (beginsWithConsonant(charactersRemaining)) {\n      shiftCharacter();\n      continue;\n    }\n\n    if (beginsWithDiphthong(charactersRemaining)) {\n      if (charactersRemaining[1]) {\n        currentSyllable += charactersRemaining[0] + charactersRemaining[1];\n      }\n      charactersRemaining = charactersRemaining.substr(2);\n\n      if (beginsWithVowel(charactersRemaining)) {\n        advanceSyllable();\n      }\n      continue;\n    }\n\n    if (beginsWithVowelFollowedByVowel(charactersRemaining)) {\n      // console.log('beginsWithVowelFollowedByVowel',charactersRemaining)\n      shiftCharacter();\n      advanceSyllable();\n      continue;\n    }\n\n    shiftCharacter();\n  }\n  advanceSyllable();\n  return syllables;\n}\n\nfunction extractConsonantClustersPronouncedTogether(text: string) {\n  let consonantClusters: ConsonantCluster[] = [];\n  let words = removeNumbers(removePunctuation(text.toLowerCase())).split(' ');\n  // console.log(words);\n  words.forEach(function (word: string) {\n    let characters = word.split('');\n    let consonantCluster = [];\n    while (characters[0] && isConsonant(characters[0])) {\n      consonantCluster.push(characters.shift());\n    }\n    if (consonantCluster.length > 1) {\n      consonantClusters.push(consonantCluster.join(''));\n    }\n  });\n  return Array.from(new Set(consonantClusters));\n}\n\nexport { syllabify, extractConsonantClustersPronouncedTogether };\n"],"names":["consonantClustersPronouncedTogether","vowels","concat","diphthongs","isVowel","character","indexOf","normalize","beginsWithVowel","characters","isConsonant","beginsWithConsonant","beginsWithDiphthong","split","map","withoutAccent","join","withoutAccents","substr","beginsWithConsonantClusterPronouncedTogether","charactersLowerCased","toLowerCase","x","length","tmp","beginsWithSingleConsonantFollowedByVowel","beginsWithVowelFollowedByVowel","beginsWithDoubleConsonant","replace","word","cluster","syllables","currentSyllable","charactersRemaining","advanceSyllable","push","shiftCharacter"],"mappings":";;;;;kPAoBA,IAAMA,EAAsC,CAC1C,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAKIC,EAFa,CAAC,IAAK,IAAK,KAEJC,OADN,CAAC,IAAK,IAAK,IAAK,IAAK,MAKnCC,EAFiB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAEpBD,OADD,CAAC,KAAM,OAexC,SAASE,EAAQC,GACf,oBADeA,OACiD,IAAzDJ,EAAOK,QAAQD,EAAUE,UAAU,OAAO,IAAM,IAGzD,SAASC,EAAgBC,GACvB,OAAOL,EAAQK,EAAW,IAG5B,SAASC,EAAYL,GACnB,OAAQD,EAAQC,GAOlB,SAASM,EAAoBF,GAC3B,OAAOC,EAAYD,EAAW,IAAM,IAGtC,SAASG,EAAoBH,GAC3B,OAAwE,IAAjEN,EAAWG,QA8CpB,SAAwBG,GACtB,OAAOA,EAAWI,MAAM,IAAIC,IAAIC,GAAeC,KAAK,IA/C1BC,CAAeR,GAAYS,OAAO,EAAG,IAGjE,SAASC,EAA6CV,GAEpD,IADA,IAAMW,EAAuBX,EAAWY,cAC/BC,EAAI,EAAGA,EAAItB,EAAoCuB,OAAQD,IAAK,CACnE,IAAME,EAAMxB,EAAoCsB,IAAM,GACtD,GAA0C,IAAtCF,EAAqBd,QAAQkB,GAC/B,OAAOf,EAAWS,OAAO,EAAGM,EAAID,QAGpC,OAAO,KAeT,SAASE,EAAyChB,GAChD,OAAOC,EAAYD,EAAW,IAAM,KAAOL,EAAQK,EAAW,IAGhE,SAASiB,EAA+BjB,GACtC,OAAOL,EAAQK,EAAW,KAAOL,EAAQK,EAAW,IAGtD,SAASkB,EAA0BlB,GACjC,OACEA,EAAWc,OAAS,GACpBb,EAAYD,EAAW,IAAM,KAC7BC,EAAYD,EAAW,IAAM,IAIjC,SAASM,EAAcV,GACrB,OAAOA,EAAUE,UAAU,OAAO,yBC5IRE,GAY1B,OADAA,GAJAA,GAJAA,EAAaA,EAAWmB,QAAQ,UAAW,MAInBA,QAAQ,UAAW,MAInBA,QAAQ,UAAW,kBCI7C,SAAmBC,gBAAAA,MACjB,IAGIC,EFoGqBrB,EEvGrBsB,EAAwB,GACxBC,EAAkB,GAClBC,EAA8BJ,EAAKtB,UAAU,OAGjD,SAAS2B,IACHF,EAAgBT,SAClBQ,EAAUI,KAAKH,GACfA,EAAkB,IAItB,SAASI,IACPJ,GAAmBC,EAAoB,GACvCA,EAAsBA,EAAoBf,OAAO,GAKnD,KAAOe,EAAoBV,QFqFE,KADJd,EEnFDoB,GFoFNN,QAAgBb,EAAYD,EAAW,IAAM,IEnF3D2B,KAKCN,EACCX,EAA6Cc,KAE3CD,EAAgBT,QAClBW,IAEFF,GAAmBF,EACnBG,EAAsBA,EAAoBf,OAAOY,EAAQP,SAIvDE,EAAyCQ,IAEvCD,EAAgBT,QAClBW,IAEFE,KAIET,EAA0BM,IAE5BG,IACAF,KAIEvB,EAAoBsB,GACtBG,IAIExB,EAAoBqB,IAClBA,EAAoB,KACtBD,GAAmBC,EAAoB,GAAKA,EAAoB,IAI9DzB,EAFJyB,EAAsBA,EAAoBf,OAAO,KAG/CgB,KAKAR,EAA+BO,IAEjCG,IACAF,KAIFE,IAGF,OADAF,IACOH"}