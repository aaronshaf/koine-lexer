{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/syllabify.ts","../src/utils/remove_acutes.ts","../src/utils/remove_graves.ts","../src/utils/add_acute.ts","../src/utils/accentuate_last_vowel.ts","../src/utils/contains_circumflex.ts","../src/accentuation.ts","../src/amalgamate.ts"],"sourcesContent":["const consonants = [\n  'β',\n  'γ',\n  'δ',\n  'ζ',\n  'θ',\n  'κ',\n  'λ',\n  'μ',\n  'ν',\n  'ξ',\n  'π',\n  'ρ',\n  'ς',\n  'σ',\n  'τ',\n  'φ',\n  'χ',\n  'ψ',\n];\nconst consonantClustersPronouncedTogether = [\n  'βλ',\n  'βρ',\n  'γλ',\n  'γν',\n  'γρ',\n  'δρ',\n  'θλ',\n  'θρ',\n  'θν',\n  'κλ',\n  'κρ',\n  'κτ',\n  'μν',\n  'πλ',\n  'πν',\n  'πρ',\n  'πτ',\n  'σκ',\n  'σκλ',\n  'σμ',\n  'σπ',\n  'σπλ',\n  'στ',\n  'στρ',\n  'σφ',\n  'σθ',\n  'σχ',\n  'τρ',\n  'φθ',\n  'φλ',\n  'φρ',\n  'χρ',\n  'χθ',\n];\n\nconst longVowels = ['η', 'ω', 'ᾳ'];\nconst shortVowels = ['α', 'ε', 'ι', 'ο', 'υ'];\nconst vowels = longVowels.concat(shortVowels);\n\nconst longDiphthongs = ['ει', 'ηυ', 'ου', 'ευ', 'αι', 'υι'];\nconst shortDiphthongsWhenFinal = ['αυ', 'οι'];\nconst diphthongs = longDiphthongs.concat(shortDiphthongsWhenFinal);\n\nfunction isLongVowel(character: string) {\n  return longVowels.indexOf(character) !== -1;\n}\n\nexport function isLongSyllable(syllable: string) {\n  const vowelsOnly = syllable.split('').filter(isVowel).join('');\n  if (vowelsOnly.length === 2) {\n    return isDiphthong(vowelsOnly);\n  }\n  return isLongVowel(vowelsOnly);\n}\n\nfunction isVowel(character = '') {\n  return vowels.indexOf(character.normalize('NFD')[0] || '') !== -1;\n}\n\nfunction beginsWithVowel(characters: string) {\n  return isVowel(characters[0]);\n}\n\nfunction isConsonant(character: string) {\n  return !isVowel(character);\n}\n\nfunction isDiphthong(characters: string) {\n  return diphthongs.indexOf(characters) !== -1;\n}\n\nfunction beginsWithConsonant(characters: string) {\n  return isConsonant(characters[0] || '');\n}\n\nfunction beginsWithDiphthong(characters: string) {\n  return diphthongs.indexOf(withoutAccents(characters).substr(0, 2)) !== -1;\n}\n\nfunction beginsWithConsonantClusterPronouncedTogether(characters: string) {\n  const charactersLowerCased = characters.toLowerCase();\n  for (let x = 0; x < consonantClustersPronouncedTogether.length; x++) {\n    const tmp = consonantClustersPronouncedTogether[x] || '';\n    if (charactersLowerCased.indexOf(tmp) === 0) {\n      return characters.substr(0, tmp.length);\n    }\n  }\n  return null;\n}\n\nfunction endsWithShortDiphthong(characters: string) {\n  return (\n    shortDiphthongsWhenFinal.indexOf(\n      characters.substr(characters.length - 2),\n    ) !== -1\n  );\n}\n\nfunction isSingleConsonant(characters: string) {\n  return characters.length === 1 && isConsonant(characters[0] || '');\n}\n\nfunction beginsWithSingleConsonantFollowedByVowel(characters: string) {\n  return isConsonant(characters[0] || '') && isVowel(characters[1]);\n}\n\nfunction beginsWithVowelFollowedByVowel(characters: string) {\n  return isVowel(characters[0]) && isVowel(characters[1]);\n}\n\nfunction beginsWithDoubleConsonant(characters: string) {\n  return (\n    characters.length > 1 &&\n    isConsonant(characters[0] || '') &&\n    isConsonant(characters[1] || '')\n  );\n}\n\nfunction withoutAccent(character: string) {\n  return character.normalize('NFD')[0];\n}\n\nfunction withoutAccents(characters: string) {\n  return characters.split('').map(withoutAccent).join('');\n}\n\nfunction removePunctuation(characters: string) {\n  return characters.replace(/[,.·;]/g, '');\n}\n\nfunction removeNumbers(characters: string) {\n  return clean(characters).replace(/[1234567890]/g, '');\n}\n\n// function lengthen(vowel: string) {}\n\n// function connectAndLengthen(part1: string, part2: string) {}\n\nfunction clean(characters: string) {\n  return (\n    characters\n      //remove newlines\n      .replace(/(\\r\\n|\\n|\\r)/gm, '')\n      // remove multiple spaces as well\n      .replace(/ +(?= )/g, '')\n  );\n}\n\nexport {\n  consonants,\n  consonantClustersPronouncedTogether,\n  isVowel,\n  isLongVowel,\n  isConsonant,\n  withoutAccents,\n  removeNumbers,\n  removePunctuation,\n  isSingleConsonant,\n  beginsWithVowel,\n  beginsWithDiphthong,\n  beginsWithConsonant,\n  beginsWithVowelFollowedByVowel,\n  beginsWithSingleConsonantFollowedByVowel,\n  beginsWithDoubleConsonant,\n  beginsWithConsonantClusterPronouncedTogether,\n  endsWithShortDiphthong,\n};\n","import type { Syllable, ConsonantCluster } from '../phonology';\nimport {\n  isSingleConsonant,\n  beginsWithConsonantClusterPronouncedTogether,\n  beginsWithConsonant,\n  beginsWithVowelFollowedByVowel,\n  beginsWithSingleConsonantFollowedByVowel,\n  isConsonant,\n  beginsWithDoubleConsonant,\n  beginsWithVowel,\n  removeNumbers,\n  beginsWithDiphthong,\n  removePunctuation,\n} from './utils';\n\nfunction syllabify(word = '') {\n  const syllables: Syllable[] = [];\n  let currentSyllable = '';\n  let charactersRemaining: string = word.normalize('NFC');\n  let cluster;\n\n  function advanceSyllable() {\n    if (currentSyllable.length) {\n      syllables.push(currentSyllable);\n      currentSyllable = '';\n    }\n  }\n\n  function shiftCharacter() {\n    currentSyllable += charactersRemaining[0];\n    charactersRemaining = charactersRemaining.substr(1);\n  }\n\n  // let wordWithoutAccents = withoutAccents(word);\n\n  while (charactersRemaining.length) {\n    if (isSingleConsonant(word)) {\n      shiftCharacter();\n      continue;\n    }\n\n    if (\n      (cluster =\n        beginsWithConsonantClusterPronouncedTogether(charactersRemaining))\n    ) {\n      if (currentSyllable.length) {\n        advanceSyllable();\n      }\n      currentSyllable += cluster;\n      charactersRemaining = charactersRemaining.substr(cluster.length);\n      continue;\n    }\n\n    if (beginsWithSingleConsonantFollowedByVowel(charactersRemaining)) {\n      // console.log('beginsWithSingleConsonantFollowedByVowel',charactersRemaining);\n      if (currentSyllable.length) {\n        advanceSyllable();\n      }\n      shiftCharacter();\n      continue;\n    }\n\n    if (beginsWithDoubleConsonant(charactersRemaining)) {\n      // console.log('beginsWithDoubleConsonant',charactersRemaining);\n      shiftCharacter();\n      advanceSyllable();\n      continue;\n    }\n\n    if (beginsWithConsonant(charactersRemaining)) {\n      shiftCharacter();\n      continue;\n    }\n\n    if (beginsWithDiphthong(charactersRemaining)) {\n      if (charactersRemaining[1]) {\n        currentSyllable += charactersRemaining[0] + charactersRemaining[1];\n      }\n      charactersRemaining = charactersRemaining.substr(2);\n\n      if (beginsWithVowel(charactersRemaining)) {\n        advanceSyllable();\n      }\n      continue;\n    }\n\n    if (beginsWithVowelFollowedByVowel(charactersRemaining)) {\n      // console.log('beginsWithVowelFollowedByVowel',charactersRemaining)\n      shiftCharacter();\n      advanceSyllable();\n      continue;\n    }\n\n    shiftCharacter();\n  }\n  advanceSyllable();\n  return syllables;\n}\n\nfunction extractConsonantClustersPronouncedTogether(text: string) {\n  const consonantClusters: ConsonantCluster[] = [];\n  const words = removeNumbers(removePunctuation(text.toLowerCase())).split(' ');\n  // console.log(words);\n  words.forEach(function (word: string) {\n    const characters = word.split('');\n    const consonantCluster = [];\n    while (characters[0] && isConsonant(characters[0])) {\n      consonantCluster.push(characters.shift());\n    }\n    if (consonantCluster.length > 1) {\n      consonantClusters.push(consonantCluster.join(''));\n    }\n  });\n  return Array.from(new Set(consonantClusters));\n}\n\nexport { syllabify, extractConsonantClustersPronouncedTogether };\n","function isNotAcute(character: string) {\n  return character.charCodeAt(0) !== 769;\n}\nexport default function (characters = '') {\n  return characters\n    .normalize('NFD')\n    .split('')\n    .filter(isNotAcute)\n    .join('')\n    .normalize('NFC');\n}\n","function isNotGrave(character: string) {\n  return character.charCodeAt(0) !== 768;\n}\n\nexport default function (characters = '') {\n  return characters\n    .normalize('NFD')\n    .split('')\n    .filter(isNotGrave)\n    .join('')\n    .normalize('NFC');\n}\n","const acute = String.fromCharCode(769);\n\nexport default function (character = '') {\n  return character.concat(acute).normalize('NFC');\n}\n","import addAcute from './add_acute';\nimport { isVowel } from '../utils';\n\nfunction replaceCharacter(characters: string, index: number) {\n  return (\n    characters.substr(0, index) +\n    addAcute(characters[index]) +\n    characters.substr(index + 1)\n  );\n}\n\nfunction accentuateLastVowel(characters: string) {\n  characters = characters.normalize('NFC'); // necessary?\n\n  const addedAcute = false;\n  for (let x = characters.length - 1; x > -1; x--) {\n    if (!addedAcute && isVowel(characters[x])) {\n      characters = replaceCharacter(characters, x);\n\n      return characters;\n    }\n  }\n  return characters;\n}\n\nexport default accentuateLastVowel;\n","const circumflex = String.fromCharCode(834);\n\nfunction isCircumflex(character: string) {\n  return character === circumflex;\n}\n\nexport default function (characters = '') {\n  return characters.normalize('NFD').split('').some(isCircumflex);\n}\n","import { syllabify } from './syllabify';\nimport type { Syllable } from '../phonology';\nimport { isLongSyllable } from './utils';\nimport removeAcutes from './utils/remove_acutes';\nimport removeGraves from './utils/remove_graves';\nimport accentuateLastVowel from './utils/accentuate_last_vowel';\nimport containsCircumflex from './utils/contains_circumflex';\n\nfunction accentuateAntepenult(syllables: Syllable[]) {\n  syllables[syllables.length - 3] = accentuateLastVowel(\n    syllables[syllables.length - 3] || '',\n  );\n  return syllables;\n}\n\nfunction accentuatePenult(syllables: Syllable[]) {\n  syllables[syllables.length - 2] = accentuateLastVowel(\n    syllables[syllables.length - 2] || '',\n  );\n  return syllables;\n}\n\nfunction accentuateUltima(syllables: Syllable[]) {\n  syllables[syllables.length - 1] = accentuateLastVowel(\n    syllables[syllables.length - 1] || '',\n  );\n  return syllables;\n}\n\nfunction accentuateVerb(word: string) {\n  word = removeAcutes(removeGraves(word));\n  let syllables = syllabify(word);\n  // let antepenult = syllables[syllables.length - 3];\n  const penult = syllables[syllables.length - 2] || '';\n  const ultima = syllables[syllables.length - 1] || '';\n\n  // if circumflex is on the ultima, then acute was absorbed from penultima\n  if (containsCircumflex(ultima)) {\n    return word;\n  }\n\n  if (syllables.length > 1) {\n    if (isLongSyllable(ultima)) {\n      syllables = accentuatePenult(syllables);\n    } else {\n      if (syllables.length > 2) {\n        syllables = accentuateAntepenult(syllables);\n      } else {\n        // \"The acute may not stand on a long penult when the\n        // ultima is short: δούλου, but δοῦλος.\" (Black)\n\n        if (isLongSyllable(ultima)) {\n          syllables = accentuatePenult(syllables);\n        } else if (!isLongSyllable(penult)) {\n          syllables = accentuatePenult(syllables);\n        }\n      }\n    }\n  } else {\n    syllables = accentuateUltima(syllables);\n  }\n\n  return syllables.join('').normalize('NFC');\n}\n\nexport { accentuateVerb };\n\n// John 9:40-41 has it all...\n\n/*\noxytone\n  words 'born' with accent on ultima\n\nparoxytone\n  words 'born' with accent on penultima\n\nproparoxytone\n  words 'born' with accent on antepenultima\n*/\n","export function amalgamate(characters: string) {\n  // Labials\n  // \"π, β, φ + σ form the double consonant ψ\" (Black)\n  characters = characters.replace(/[πβφ]σ/g, 'ψ');\n\n  // Velars\n  // \"κ, γ, χ + σ form the double consonant ξ.\" (Black)\n  characters = characters.replace(/[κγχ]σ/g, 'ξ');\n\n  // Dentals\n  // \"τ, δ, θ drop out before σ\" (Black)\n  characters = characters.replace(/[τδθ]σ/g, 'σ');\n  return characters;\n}\n"],"names":[],"mappings":"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"}